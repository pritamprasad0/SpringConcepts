 * We can create query methods that use this strategy by following these rules: 
 	- The name of our query method must start with one of the following prefixes: 
 		find…By, read…By, query…By, count…By, and get…By.
	- If we want to limit the number of returned query results, we can add the First or the Top keyword before 
	the first By word. If we want to get more than one result, we have to append the optional numeric value to 
	the First and the Top keywords. For example, 
		findTopBy, findTop1By, findFirstBy, and findFirst1By 
		- all return the first entity that matches with the specified search criteria.
	- If we want to select unique results, we have to add the Distinct keyword before the first By word. For example, 
		findTitleDistinctBy or findDistinctTitleBy 
		- means that we want to select all unique titles that are found from the database.
	- We must add the search criteria of our query method after the first By word. We can specify the search criteria 
	by combining property expressions with the supported keywords.
	- If our query method specifies x search conditions, we must add x method parameters to it. In other words, the 
	number of method parameters must be equal than the number of search conditions. Also, the method parameters must 
	be given in the same order than the search conditions.
	- We must set the return type of the query method by following the rules that were described in the previous part 
	of this tutorial.
	- Examples:
	
		/**
	     * Returns the found todo entry by using its id as search 
	     * criteria. If no todo entry is found, this method
	     * returns null. 
	     */
	    public Todo findById(Long id);
	 
	    /**
	     * Returns an Optional which contains the found todo 
	     * entry by using its id as search criteria. If no to entry
	     * is found, this method returns an empty Optional.
	     */
	    public Optional<Todo> findById(Long id);
	    
	    /**
	     * Returns the found todo entry whose title or description is given
	     * as a method parameter. If no todo entry is found, this method
	     * returns an empty list.
	     */
	    public List<Todo> findByTitleOrDescription(String title, String description);
	    
		/**
		 * Returns the number of todo entry whose title is given
		 * as a method parameter.
	     */
	    public long countByTitle(String title);
	    
	    /**
	     * Returns the distinct todo entries whose title is given
	     * as a method parameter. If no todo entries is found, this
	     * method returns an empty list.
	     */
	    public List<Todo> findDistinctByTitle(String title);
	    
	    /**
	     * Returns the first three todo entries whose title is given
	     * as a method parameter. If no todo entries is found, this
	     * method returns an empty list.
	     */
	    public List<Todo> findFirst3ByTitleOrderByTitleAsc(String title);
	 
	    /**
	     * Returns the first three todo entries whose title is given
	     * as a method parameter. If no todo entries is found, this
	     * method returns an empty list.
	     */
	    public List<Todo> findTop3ByTitleOrderByTitleAsc(String title);
	    
	    /**
	     * To search Todo objects whose Description or Title contains parameters passed and which is case insensitive 
	     */
	   	List<Todo> findByDescriptionContainsOrTitleContainsAllIgnoreCase(String descriptionPart, String titlePart);
	   	
	   	@Query(value = "SELECT * FROM todos t WHERE " +
            "LOWER(t.title) LIKE LOWER(CONCAT('%',:searchTerm, '%')) OR " +
            "LOWER(t.description) LIKE LOWER(CONCAT('%',:searchTerm, '%'))",
            nativeQuery = true)
    	List<Todo> findBySearchTermNative(@Param("searchTerm") String searchTerm);
	- 